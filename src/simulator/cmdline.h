/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.6
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "goalsim"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "goalsim"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "0.1"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * network_file_arg;	/**< @brief Input file for network (annotated dot format).  */
  char * network_file_orig;	/**< @brief Input file for network (annotated dot format) original value given at command line.  */
  const char *network_file_help; /**< @brief Input file for network (annotated dot format) help description.  */
  int network_pktsize_arg;	/**< @brief Network packet size (default='64').  */
  char * network_pktsize_orig;	/**< @brief Network packet size original value given at command line.  */
  const char *network_pktsize_help; /**< @brief Network packet size help description.  */
  int network_maxcredits_arg;	/**< @brief Switch buffer capacity (default='4096').  */
  char * network_maxcredits_orig;	/**< @brief Switch buffer capacity original value given at command line.  */
  const char *network_maxcredits_help; /**< @brief Switch buffer capacity help description.  */
  int network_ptime_arg;	/**< @brief Switch packet's byte processing time (default='1').  */
  char * network_ptime_orig;	/**< @brief Switch packet's byte processing time original value given at command line.  */
  const char *network_ptime_help; /**< @brief Switch packet's byte processing time help description.  */
  int network_latency_arg;	/**< @brief Link latency (default='2000').  */
  char * network_latency_orig;	/**< @brief Link latency original value given at command line.  */
  const char *network_latency_help; /**< @brief Link latency help description.  */
  char * filename_arg;	/**< @brief Prefix for the filenames which contain the schedules.  */
  char * filename_orig;	/**< @brief Prefix for the filenames which contain the schedules original value given at command line.  */
  const char *filename_help; /**< @brief Prefix for the filenames which contain the schedules help description.  */
  int save_mem_flag;	/**< @brief Map the schedules as MAP_SHARED to enable processing of large schedule (larger than main memory). This will invalidate the schedules during simulation. (default=off).  */
  const char *save_mem_help; /**< @brief Map the schedules as MAP_SHARED to enable processing of large schedule (larger than main memory). This will invalidate the schedules during simulation. help description.  */
  char * vizfile_arg;	/**< @brief Name of the output file for visualization data.  */
  char * vizfile_orig;	/**< @brief Name of the output file for visualization data original value given at command line.  */
  const char *vizfile_help; /**< @brief Name of the output file for visualization data help description.  */
  const char *verbose_help; /**< @brief Enable more verbose output help description.  */
  const char *progress_help; /**< @brief print progress help description.  */
  const char *batchmode_help; /**< @brief enable batchmode (never print detailed host info) help description.  */
  char * noise_trace_arg;	/**< @brief Read Noise from trace <file>.  */
  char * noise_trace_orig;	/**< @brief Read Noise from trace <file> original value given at command line.  */
  const char *noise_trace_help; /**< @brief Read Noise from trace <file> help description.  */
  int noise_cosched_flag;	/**< @brief Co-schedule noise (use same starttime on all processes) (default=off).  */
  const char *noise_cosched_help; /**< @brief Co-schedule noise (use same starttime on all processes) help description.  */
  float noise_time_mult_arg;	/**< @brief Noise trace time multiplier (default is ns) (default='1.0').  */
  char * noise_time_mult_orig;	/**< @brief Noise trace time multiplier (default is ns) original value given at command line.  */
  const char *noise_time_mult_help; /**< @brief Noise trace time multiplier (default is ns) help description.  */
  int LogGOPS_L_arg;	/**< @brief The latency parameter L in the LogGP model (default='2500').  */
  char * LogGOPS_L_orig;	/**< @brief The latency parameter L in the LogGP model original value given at command line.  */
  const char *LogGOPS_L_help; /**< @brief The latency parameter L in the LogGP model help description.  */
  int LogGOPS_o_arg;	/**< @brief The overhead parameter o in the LogGP model (default='1500').  */
  char * LogGOPS_o_orig;	/**< @brief The overhead parameter o in the LogGP model original value given at command line.  */
  const char *LogGOPS_o_help; /**< @brief The overhead parameter o in the LogGP model help description.  */
  int LogGOPS_g_arg;	/**< @brief The gap per message parameter g in the LogGP model (default='1000').  */
  char * LogGOPS_g_orig;	/**< @brief The gap per message parameter g in the LogGP model original value given at command line.  */
  const char *LogGOPS_g_help; /**< @brief The gap per message parameter g in the LogGP model help description.  */
  int LogGOPS_G_arg;	/**< @brief The gap per byte parameter G in the LogGP model (default='6').  */
  char * LogGOPS_G_orig;	/**< @brief The gap per byte parameter G in the LogGP model original value given at command line.  */
  const char *LogGOPS_G_help; /**< @brief The gap per byte parameter G in the LogGP model help description.  */
  int LogGOPS_S_arg;	/**< @brief Datasize at which we change from eager to rendezvous protocol (default='65535').  */
  char * LogGOPS_S_orig;	/**< @brief Datasize at which we change from eager to rendezvous protocol original value given at command line.  */
  const char *LogGOPS_S_help; /**< @brief Datasize at which we change from eager to rendezvous protocol help description.  */
  int LogGOPS_O_arg;	/**< @brief The overhead per byte in LogGOP (default='0').  */
  char * LogGOPS_O_orig;	/**< @brief The overhead per byte in LogGOP original value given at command line.  */
  const char *LogGOPS_O_help; /**< @brief The overhead per byte in LogGOP help description.  */
  int LogGOPS_C_arg;	/**< @brief P4: Time to transfer 1byte from the main memory to the NIC memory (default='1').  */
  char * LogGOPS_C_orig;	/**< @brief P4: Time to transfer 1byte from the main memory to the NIC memory original value given at command line.  */
  const char *LogGOPS_C_help; /**< @brief P4: Time to transfer 1byte from the main memory to the NIC memory help description.  */
  int LogGOPS_c_arg;	/**< @brief P4: Time required from the NIC to process one incoming message (default='100').  */
  char * LogGOPS_c_orig;	/**< @brief P4: Time required from the NIC to process one incoming message original value given at command line.  */
  const char *LogGOPS_c_help; /**< @brief P4: Time required from the NIC to process one incoming message help description.  */
  int sPIN_c_packet_arg;	/**< @brief P4: Time required from the NIC to match one packet but the first (default='10').  */
  char * sPIN_c_packet_orig;	/**< @brief P4: Time required from the NIC to match one packet but the first original value given at command line.  */
  const char *sPIN_c_packet_help; /**< @brief P4: Time required from the NIC to match one packet but the first help description.  */
  char * gem5_conf_file_arg;	/**< @brief P4: GEM5 configuration file.  */
  char * gem5_conf_file_orig;	/**< @brief P4: GEM5 configuration file original value given at command line.  */
  const char *gem5_conf_file_help; /**< @brief P4: GEM5 configuration file help description.  */
  int gem5_time_mult_arg;	/**< @brief P4: GEM5 time multiplier (1 tick=1ps) (default='1000').  */
  char * gem5_time_mult_orig;	/**< @brief P4: GEM5 time multiplier (1 tick=1ps) original value given at command line.  */
  const char *gem5_time_mult_help; /**< @brief P4: GEM5 time multiplier (1 tick=1ps) help description.  */
  int gem5_o_hpu_arg;	/**< @brief P4: overhead of sending network request from HPU  (default='0').  */
  char * gem5_o_hpu_orig;	/**< @brief P4: overhead of sending network request from HPU  original value given at command line.  */
  const char *gem5_o_hpu_help; /**< @brief P4: overhead of sending network request from HPU  help description.  */
  int gem5_o_nb_dma_arg;	/**< @brief P4: overhead of non-blocking DMA requests (default='0').  */
  char * gem5_o_nb_dma_orig;	/**< @brief P4: overhead of non-blocking DMA requests original value given at command line.  */
  const char *gem5_o_nb_dma_help; /**< @brief P4: overhead of non-blocking DMA requests help description.  */
  int gem5_cas_failure_rate_arg;	/**< @brief P4: probability of CAS failure (default='10').  */
  char * gem5_cas_failure_rate_orig;	/**< @brief P4: probability of CAS failure original value given at command line.  */
  const char *gem5_cas_failure_rate_help; /**< @brief P4: probability of CAS failure help description.  */
  int DMA_L_arg;	/**< @brief LogGP L for DMA (default='3').  */
  char * DMA_L_orig;	/**< @brief LogGP L for DMA original value given at command line.  */
  const char *DMA_L_help; /**< @brief LogGP L for DMA help description.  */
  int DMA_G_arg;	/**< @brief LogGP G for DMA (default='0').  */
  char * DMA_G_orig;	/**< @brief LogGP G for DMA original value given at command line.  */
  const char *DMA_G_help; /**< @brief LogGP G for DMA help description.  */
  int DMA_g_arg;	/**< @brief LogGP g for DMA (default='0').  */
  char * DMA_g_orig;	/**< @brief LogGP g for DMA original value given at command line.  */
  const char *DMA_g_help; /**< @brief LogGP g for DMA help description.  */
  int DMA_contention_arg;	/**< @brief Contention for DMA (default='1').  */
  char * DMA_contention_orig;	/**< @brief Contention for DMA original value given at command line.  */
  const char *DMA_contention_help; /**< @brief Contention for DMA help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int network_file_given ;	/**< @brief Whether network-file was given.  */
  unsigned int network_pktsize_given ;	/**< @brief Whether network-pktsize was given.  */
  unsigned int network_maxcredits_given ;	/**< @brief Whether network-maxcredits was given.  */
  unsigned int network_ptime_given ;	/**< @brief Whether network-ptime was given.  */
  unsigned int network_latency_given ;	/**< @brief Whether network-latency was given.  */
  unsigned int filename_given ;	/**< @brief Whether filename was given.  */
  unsigned int save_mem_given ;	/**< @brief Whether save-mem was given.  */
  unsigned int vizfile_given ;	/**< @brief Whether vizfile was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int progress_given ;	/**< @brief Whether progress was given.  */
  unsigned int batchmode_given ;	/**< @brief Whether batchmode was given.  */
  unsigned int noise_trace_given ;	/**< @brief Whether noise-trace was given.  */
  unsigned int noise_cosched_given ;	/**< @brief Whether noise-cosched was given.  */
  unsigned int noise_time_mult_given ;	/**< @brief Whether noise-time-mult was given.  */
  unsigned int LogGOPS_L_given ;	/**< @brief Whether LogGOPS_L was given.  */
  unsigned int LogGOPS_o_given ;	/**< @brief Whether LogGOPS_o was given.  */
  unsigned int LogGOPS_g_given ;	/**< @brief Whether LogGOPS_g was given.  */
  unsigned int LogGOPS_G_given ;	/**< @brief Whether LogGOPS_G was given.  */
  unsigned int LogGOPS_S_given ;	/**< @brief Whether LogGOPS_S was given.  */
  unsigned int LogGOPS_O_given ;	/**< @brief Whether LogGOPS_O was given.  */
  unsigned int LogGOPS_C_given ;	/**< @brief Whether LogGOPS_C was given.  */
  unsigned int LogGOPS_c_given ;	/**< @brief Whether LogGOPS_c was given.  */
  unsigned int sPIN_c_packet_given ;	/**< @brief Whether sPIN_c_packet was given.  */
  unsigned int gem5_conf_file_given ;	/**< @brief Whether gem5-conf-file was given.  */
  unsigned int gem5_time_mult_given ;	/**< @brief Whether gem5-time-mult was given.  */
  unsigned int gem5_o_hpu_given ;	/**< @brief Whether gem5_o_hpu was given.  */
  unsigned int gem5_o_nb_dma_given ;	/**< @brief Whether gem5_o_nb_dma was given.  */
  unsigned int gem5_cas_failure_rate_given ;	/**< @brief Whether gem5_cas_failure_rate was given.  */
  unsigned int DMA_L_given ;	/**< @brief Whether DMA_L was given.  */
  unsigned int DMA_G_given ;	/**< @brief Whether DMA_G was given.  */
  unsigned int DMA_g_given ;	/**< @brief Whether DMA_g was given.  */
  unsigned int DMA_contention_given ;	/**< @brief Whether DMA_contention was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
