    switch (num){
        case PUTDEVICE:
            {
                if (print) printf("--Executing PtlHandlerPutFromDevice called from %i at time: %lu\n", event.host, time);
               
                uint32_t host = event.host; 
                uint32_t target= ((uint32_t*)data)[0];
                uint32_t size= ((uint32_t*)data)[1];
                uint32_t tag= ((uint32_t*)data)[2];  
                uint32_t arg1= ((uint32_t*)data)[3];    
                int type = OP_NPUT;

                time += o_hpu;
                sim.addEvent(new goalevent(host, target, size, tag, type, time,arg1));

                if (print) printf("host %u target %u size %u tag %u\n", host, target, size, tag);
                return true;
            }
        case PUTHOST:
            {
                if (print) printf("Executing PtlHandlerPutFromHost called from %i at time: %lu\n", event.host, time);
         
                uint32_t host = event.host; 
                uint32_t target= ((uint32_t*)data)[0];
                uint32_t size= ((uint32_t*)data)[1];
                uint32_t tag= ((uint32_t*)data)[2];
                uint32_t arg1= ((uint32_t*)data)[3];  
                int type = OP_NPUT;


                time += o_hpu;

                sim.tlviz->add_nicop(host, time, time+DMA_L, 0,0.3,0.3,0.3);

                goalevent * nput = new goalevent(host, target, size, tag, type, time + 2*DMA_L,arg1);
              //  DMAReadEvent * dmaev = new DMAReadEvent(nput, size, host, true, time);
                sim.addEvent(nput);
 
                //sim.addEvent(new goalevent(host, target, size, tag, type, oct, time + o_hpu));
                return true;
            }       
        case GETHOST:
            {
                if (print) printf("Executing PtlHandlerGetToHost called from %i at time: %lu\n", event.host, time);
               
                uint32_t host = event.host; 
                uint32_t target= ((uint32_t*)data)[0];
                uint32_t size= ((uint32_t*)data)[1];
                uint32_t tag= ((uint32_t*)data)[2];
                int type = OP_NGET;
                 
                time += o_hpu;
           
                sim.addEvent(new goalevent(host, target, size, tag, type, time));
                return true;
            }       
        case DMA_WRITE_NB:
            {
                if (print) printf("Executing PtlHandlerDMAToHostNB called from %i at time: %lu\n", event.host, time);
               
                time += o_dma;
                uint32_t size = ((uint32_t*)data)[0];
                DMAWriteEvent * dmaev = new DMAWriteEvent(&event, size, event.host, false, time);
                sim.addEvent(dmaev);
                *((ptl_dma_h*)data) = dmaev->id;
                // printf("DMAid: %lu \n",dmaev->id);
                return true;
            }
        case DMA_WRITE_B:
            {
                if (print) printf("Executing PtlHandlerDMAToHostB called from %i at time: %lu\n", event.host, time);

                /* we don't dare to update the time here since the handler is going to be suspended and
                *  the new event will carry the time with itself. */

                uint32_t size = ((uint32_t*)data)[0];
                if (print) printf("dma size %u\n", size);
                DMAWriteEvent * dmaev = new DMAWriteEvent(&event, size, event.host, true, time + o_dma);
                sim.addEvent(dmaev);

                /* return false to indicate that the handler has been suspended */
                return false;
            }
        case DMA_READ_NB:
            {
                if (print) printf("Executing PtlHandlerDMAFromHostNB called from %i at time: %lu\n", event.host, time);
                time += o_dma;
                uint32_t size = ((uint32_t*)data)[0];
                DMAReadEvent * dmaev = new DMAReadEvent(&event, size, event.host, false, time);
                sim.addEvent(dmaev);
                *((ptl_dma_h*)data) = dmaev->id;
                //  printf("DMAid: %lu \n",dmaev->id);
                return true;
            }
        case DMA_READ_B:
           {
                if (print) printf("Executing PtlHandlerDMAFromHostB called from %i at time: %lu\n", event.host, time);
                /* we don't dare to update the time here since the handler is going to be suspended and
                *  the new event will carry the time with itself. */

                uint32_t size = ((uint32_t*)data)[0];
                if (print) printf("dma size %u\n", size);
                DMAReadEvent * dmaev = new DMAReadEvent(&event, size, event.host, true, time + o_dma);
                sim.addEvent(dmaev);
                return false;
            }
        case DMA_WAIT:
            {
                if (print) printf("Executing PtlHandlerDMAWait called from %i at time: %lu\n", event.host, time);
                uint64_t reqid = ((uint64_t*)data)[0];
                //  printf("Wait for : %lu \n",reqid);
                /* we don't dare to update the time here since the handler is going to be suspended and
                *  the new event will carry the time with itself. */

                sim.addEvent(new DMAWaitEvent(&event, event.host, reqid, time + o_dma));
                return false;
            }

        case DMA_CAS_NB:
            {
                if (print) printf("Executing PtlHandlerDMACASNB called from %i at time: %lu\n", event.host, time);
                time += o_dma;
                uint32_t size = ((uint32_t*)data)[0];
                DMAReadEvent * dmaev = new DMAReadEvent(&event, size, event.host, false, time);
                sim.addEvent(dmaev);
                *((ptl_dma_h*)data) = dmaev->id;
                ((uint32_t*)data)[2] = (rand()%100+1 >  cas_failure_rate);
   
 
                


                return true;
            }

        case DMA_CAS_B:
            {
                if (print) printf("Executing PtlHandlerDMACASB called from %i at time: %lu\n", event.host, time);
               
                uint32_t size = ((uint32_t*)data)[0];
                DMAReadEvent * dmaev = new DMAReadEvent(&event, size, event.host, true, time + o_dma);
                sim.addEvent(dmaev);
                ((uint32_t*)data)[2] = (rand()%100+1  >  cas_failure_rate); // 1 - success, 0 - fail
                if( print ) if(((uint32_t*)data)[2] == 1) printf("PtlHandlerDMACASB Succeess\n"); else  printf("PtlHandlerDMACASB Failure\n");
                return false;
            }

        case DMA_FADD_NB:
            {
                if (print) printf("Executing PtlHandlerDMAFetchAddNB called from %i at time: %lu\n", event.host, time);
                time += o_dma;
                uint32_t size = ((uint32_t*)data)[0];
                DMAReadEvent * dmaev = new DMAReadEvent(&event, size, event.host, false, time);
                sim.addEvent(dmaev);
                *((ptl_dma_h*)data) = dmaev->id;
                //  printf("DMAid: %lu \n",dmaev->id);
                return true;
            }

        case DMA_FADD_B:
            {
                if (print) printf("Executing PtlHandlerDMAFetchAddB called from %i at time: %lu\n", event.host, time);
                
                uint32_t size = ((uint32_t*)data)[0];
                DMAReadEvent * dmaev = new DMAReadEvent(&event, size, event.host,true, time + o_dma);
                sim.addEvent(dmaev);
                return false;
            }

        default:
            printf("Warning: no SIMCALL found with index: %i\n", num);
    }

