GEM5DIR=#LIBGEM5DIR#

AUTOGEN_SRC= cmdline.c cmdline.h 
SIM_OBJECTS= sim.o main.o 


MODULES_HEADERS := $(shell find modules/portals4/ -name '*.hpp')
MODULES_SOURCES := $(shell find modules/portals4/ -name '*.cpp')

MODULES_HEADERS := $(MODULES_HEADERS) $(shell find modules/loggop/ -name '*.hpp')
MODULES_SOURCES := $(MODULES_SOURCES) $(shell find modules/loggop/ -name '*.cpp')

MODULES_HEADERS := $(MODULES_HEADERS) $(shell find modules/packet_net/ -name '*.hpp')
MODULES_SOURCES := $(MODULES_SOURCES) $(shell find modules/packet_net/ -name '*.cpp')

MODULES_HEADERS := $(MODULES_HEADERS) $(shell find modules/dma/ -name '*.hpp')
MODULES_SOURCES := $(MODULES_SOURCES) $(shell find modules/dma/ -name '*.cpp')


ifdef GEM5DIR
  MODULES_HEADERS := $(MODULES_HEADERS) $(shell find modules/portals4_smp/ -name '*.hpp')
  MODULES_SOURCES := $(MODULES_SOURCES) $(shell find modules/portals4_smp/ -name '*.cpp')
  GEM5_ADDITIONAL=${GEM5DIR}/build/ARM/sim/cxx_config.cc
  GEM5_CXXFLAGS=-I${GEM5DIR}/build/ARM/
  GEM5_LDFLAGS= -L${GEM5DIR}/build/ARM/ -lgem5_opt -Wl,-rpath,${GEM5DIR}/build/ARM/
endif

CXX=g++ 
CXXFLAGS= -O3 -w -I/usr/include/graphviz -std=c++11 ${GEM5_CXXFLAGS}
CCFLAGS= -O3 -w
LDFLAGS= -lcgraph ${GEM5_LDFLAGS}


MODULES_OBJECTS:= $(MODULES_SOURCES:%.cpp=%.o)
$(info $(MODULES_OBJECTS))
HLPR_OBJECTS= cmdline.o 
ALL_OBJECTS= $(SIM_OBJECTS) $(MODULES_OBJECTS) $(HLPR_OBJECTS)
BINARY= sim



ARM_BIN=$(PWD)/../gem5_files/smp_bin
PREFIX= $(PWD)
FLAGS 	= 
CFLAGS 	= 



all:  $(ALL_OBJECTS) cmdline.h arm_code main_cpu
	$(CXX) $(CXXFLAGS) $(ALL_OBJECTS) ${GEM5_ADDITIONAL} -o $(BINARY) $(LDFLAGS)


cmdline.c: cmdline.ggo 
	gengetopt < cmdline.ggo

cmdline.h: cmdline.ggo
	gengetopt < simulator.ggo

%.o: %.cpp $(AUTOGEN_SRC) $(MODULES_HEADERS) $(MODULES_SOURCES) *.hpp 
	$(CXX) $(CXXFLAGS) -c $< -o $@


#%.o: %.c $(AUTOGEN_SRC) *.h
#	$(CXX) $(CCFLAGS) -c $< -o $@


arm_code: FLAGS += -I$(GEM5DIR) -I$(PREFIX)/../gem5_files/  -I$(PREFIX)/modules/portals4_smp/gem5/clientlib/
arm_code: $(ARM_BIN)
$(ARM_BIN): arm_print
	arm-linux-gnueabi-gcc -o $(ARM_BIN)  $(PREFIX)/../gem5_files/smp_code.c $(PREFIX)/../gem5_files/smp.c  -march=armv8-a --static -O3 $(FLAGS)
	@echo "##############################"
	@echo
arm_print:
	@echo "##### BUILDING Arm Binary #####"

main_cpu:
	cd ../gem5_files/mainCPU && $(MAKE)

clean:
	rm -f $(AUTOGEN_SRC)
	rm -f $(ALL_OBJECTS)
	rm -f $(BINARY)
	rm -f $(ARM_BIN)
	cd ../gem5_files/mainCPU && $(MAKE) clean

